[
["index.html", "osctools: Tools for the Organic Surface Chemistry group Preface", " osctools: Tools for the Organic Surface Chemistry group Emil Tveden Bjerglund Preface This book was written as extended documentation for the osctools R package, created to simplify and unify data analysis in the Organic Surface Chemistry group. If you have never used R or any other scripting-based tools for data analysis you have some way to go. However, I promise you that it will be well worth the effort. Some of the benefits you get from scripting-based analysis are: Your data analysis becomes very transparent and open, meaning that other people can easily see how you got from your data to the results. It is very easy to reuse code that is part of analysis, and repetitive steps are therefore easily automated. Your analysis becomes completely reproducible. That means that you (or the next student in the group) can get back to your code and raw data many months later and still understand what you did. Compare that with getting back to an Excel spreadsheet made 6 months ago and having to repeat the exact same analysis. The package contains tools to make it easy to load, plot and do common operations with the data-types that we often encounter in the Organic Surface Chemistry group. See the different methods to read about the tools for Electrochemical methods, XPS and Raman spectroscopy. "],
["getting-started.html", "1 Getting started 1.1 What is R? 1.2 Installing R 1.3 Installing the osc package 1.4 Getting started with R 1.5 Analysis in an R Notebook", " 1 Getting started 1.1 What is R? R is an open source programming language and software environment for statistical computing and graphics that is supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Wikipedia 1.2 Installing R To work in R you will need to download and install two different programs: R is downloaded for your operating system from CRAN (The Comprehensive R Archive Network). Go to https://mirrors.dotsrc.org/cran/ and select your operating system. Find the most recent version, download and install it. RStudio is a development environment made specifically for working with R. It can be downloaded and installed from https://www.rstudio.com/products/rstudio/#Desktop. 1.3 Installing the osc package The package is not currently on CRAN, but can be installed using devtools by running the code below in the console. Before you are able to do this, you must have R and RStudio installed # Install devtools and then use it to install the osc package install.packages(&#39;devtools&#39;) devtools::install_github(&#39;spoman/osctools&#39;) # Load the package library(osctools) 1.4 Getting started with R If you have no prior experience with programming, then the learning curve might feel quite steep. In the beginning even simple things will seem difficult, but with practice you will experience that once you’ve got an understanding of the basics, it is very easy to put things together and do more advanced procedures. You can dig into the examples provided for the various analytical methods. Based on those you should be able to load, plot and do common operations with your own data. Don’t be scared - most of the code is pretty close to plain english, spiced with some logic on how to read and treat the data. Some good ressources to get a more basic introduction to R can be found here: Datacamp has a free introduction to R which covers the very basics in a series of video tutorials. R for Data Science is a book by Hadley Wickham about the packages in the tidyverse. It is a great guide on how to load data, getting in into a tidy format that makes it easy to work with and how to model and plot it to obtain interesting results. 1.5 Analysis in an R Notebook The best way to work with data in R is in an R Notebook. An R Notebook is easily created in RStudio, and it allows you to mix plain text describing your experiment with R code that can be used to load and work with data. This keeps your entire analysis in one file, making it much more clear what you are doing. See the short video below to get a sense of how an R Notebook works. "],
["electrochemical-methods.html", "2 Electrochemical methods 2.1 Cyclic voltammetry 2.2 Electrolysis 2.3 Loading several files", " 2 Electrochemical methods To load electrochemical data (i.e. cyclic voltammograms or bulk electrolysis) the echem_read() function can be used. It will try to determine the type of experiment and read it accordingly.1 The package contains a few example files that we will use here. To use your own files, just supply the filename. 2.1 Cyclic voltammetry CV data can be loaded from a txt-file. library(osctools) ## Loading osctools... ## See https://spoman.github.io/oscbook/ for examples # This chould just as well be the path to your file as a string, i.e. # file &lt;- &quot;data/cv_example.txt&quot; file &lt;- system.file(&quot;extdata/cv/cv_example.txt&quot;, package = &quot;osctools&quot;) cv1 &lt;- echem_read(file) cv1 ## Cyclic Voltammetry at 0.1 V/s ## Initial scan polarity: N, Scan segments: 212 ## Init E: 0 V, High E: 0 V, Low E: -2.5 V ## Sensitivity: 1e-05, Quiet time: 2 s ## ## # A tibble: 5,000 x 6 ## potential current direc change sweep cv ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.000 -4.901e-09 neg 0 1 1 ## 2 -0.001 -1.236e-08 neg 0 1 1 ## 3 -0.002 -1.481e-08 neg 0 1 1 ## 4 -0.003 -1.547e-08 neg 0 1 1 ## 5 -0.004 -1.641e-08 neg 0 1 1 ## # ... with 4,995 more rows In case that the file is just a pure CV file without any leading metadata, you will need to specify the type of experiment. file2 &lt;- system.file(&quot;extdata/cv/cv_example4.txt&quot;, package = &quot;osctools&quot;) cv2 &lt;- echem_read(file2, type = &quot;CV&quot;) The CV objects can be plotted directly for quick assesment. However, they probably need tweaking to your specific need before they are ready for publication. plot(cv1) 2.2 Electrolysis The same principles applies to loading and plotting a bulk electrolysis. elec1 &lt;- echem_read(system.file(&quot;extdata/electrolysis/electrolysis_example.txt&quot;, package = &quot;osctools&quot;)) ## Parsed with column specification: ## cols( ## time = col_double(), ## charge = col_double(), ## current = col_double() ## ) plot(elec1) 2.3 Loading several files It is very common to have a folder full of data-files that you want to load into one table. An easy way to do that is by making a list of the filenames and then using purrr::map() to iterate over the file names. For this example we have a folder containing 4 files. list.files(path = &quot;data/cv&quot;) ## [1] &quot;CV (1).txt&quot; &quot;CV (2).txt&quot; &quot;CV (3).txt&quot; &quot;CV (4).txt&quot; We can make a list of the file names and apply echem_read() to all of them. library(tidyverse) path &lt;- &quot;data/cv/&quot; data &lt;- tibble(files = list.files(path = path, pattern = &quot;*.txt&quot;)) # Load all data from the files into the tibble data &lt;- data %&gt;% mutate(d = map(paste0(path, files), echem_read)) %&gt;% unnest() We can then use ggplot2 to plot them all simultaneously. data %&gt;% ggplot(aes(potential, current, color = files)) + geom_path() If you have problems reading certain files, then please file a Github issue and describe the problem or a pull request with a suggested solution. Remember to add a link to the file causing problems.↩ "],
["x-ray-photoelectron-spectroscopy-xps.html", "3 X-ray Photoelectron Spectroscopy (XPS)", " 3 X-ray Photoelectron Spectroscopy (XPS) "],
["raman-spectroscopy.html", "4 Raman spectroscopy", " 4 Raman spectroscopy "],
["saving-figures.html", "5 Saving figures", " 5 Saving figures "],
["github.html", "6 Github", " 6 Github "]
]
